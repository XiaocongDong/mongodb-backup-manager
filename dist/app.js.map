{"version":3,"sources":["webpack:///webpack/bootstrap 0df0fc5f416be544d151","webpack:///external \"express\"","webpack:///./server/modules/config/index.js","webpack:///./server/modules/utility/logger.js","webpack:///./server/modules/helper/response.js","webpack:///./server/modules/controller/backup.js","webpack:///./server/modules/utility/object.js","webpack:///./server/modules/constants/index.js","webpack:///./server/modules/auth/token.js","webpack:///./server/modules/databases/mongoDB.js","webpack:///./server/modules/helper/request.js","webpack:///./server/modules/task/taskPool.js","webpack:///external \"path\"","webpack:///./server/modules/error/auth.js","webpack:///./server/modules/task/task.js","webpack:///./server/modules/utility/backup.js","webpack:///./server/modules/databases/localDB.js","webpack:///./server/modules/router/index.js","webpack:///external \"app-module-path\"","webpack:///external \"http\"","webpack:///external \"socket.io\"","webpack:///./server/app.js","webpack:///./server/modules/backup/backupManager.js","webpack:///./server/modules/config/auth.js","webpack:///./server/modules/config/database.js","webpack:///./server/modules/config/server.js","webpack:///./server/modules/constants/backup.js","webpack:///./server/modules/constants/task.js","webpack:///./server/modules/controller/user.js","webpack:///./server/modules/helper/user.js","webpack:///./server/modules/middleware/logger.js","webpack:///./server/modules/middleware/response_handler.js","webpack:///./server/modules/middleware/token_handler.js","webpack:///./server/modules/router/api/backups.js","webpack:///./server/modules/router/api/collections.js","webpack:///./server/modules/router/api/databases.js","webpack:///./server/modules/router/api/index.js","webpack:///./server/modules/router/api/logs.js","webpack:///./server/modules/router/frontend.js","webpack:///./server/modules/router/user/auth.js","webpack:///./server/modules/router/user/index.js","webpack:///./server/modules/router/user/operation.js","webpack:///./server/modules/utility/database.js","webpack:///external \"basic-logger\"","webpack:///external \"body-parser\"","webpack:///external \"cookie-parser\"","webpack:///external \"mongodb\""],"names":["server","require","database","auth","config","module","exports","Logger","setLevel","logLevel","customConfig","showTimestamp","log","response","error","body","code","message","success","send","res","data","status","BackupManager","object","constants","backupUtil","MongoDB","Controller","localDB","serverSocket","backUpsHash","Map","backupId","get","backupConfig","next","id","getBackupID","has","backupDB","selfish","username","authDB","db","collections","connect","catch","err","then","getAvailableBackupCollections","dbCollections","dbsCollections","filter","dbCollection","length","Error","invalidCollections","includes","collection","updateBackupData","updateBackupConfig","info","backupManager","start","set","getBackupStatus","finally","close","backupID","backup","nextBackupTime","result","SUCCEED","FAILED","reason","dbName","restore","console","updates","stop","backupStatus","STOP","resume","WAITING","toLocaleString","RUNNING","clear","delete","deleteCopyDB","deleteCollections","mongoParams","port","password","mongoDB","getCollections","collectionName","getDataFromCollection","docs","getBackupConfigs","backupConfigs","getBackupConfig","getBackupCopyDBsWithId","backupCopyDBs","getAllCopyDBs","copyDBs","Promise","all","keys","map","key","getOriginalDB","dbs","getBackupLogs","logs","configCollectionName","debug","restart","CONTROLLER_KEY","Symbol","for","global","target","cache","WeakMap","handler","value","Reflect","bind","proxy","Proxy","deployPromiseFinally","prototype","callback","P","constructor","resolve","sortByTime","objects","reverse","sort","a","b","dateA","Date","dateB","compare","task","request","tokenManager","setDB","newToken","token","crt","valueOf","exp_time","token_exp_time","_generateToken","ip","getIp","req","user_agent","getUserAgent","valid","possible","i","charAt","Math","floor","random","setTokenToDB","setToken","getTokensFromDB","query","getToken","invalidateTokens","updateTokens","MongoClient","databaseUtil","databaseConfig","dbHash","connections","setConnectionParams","userName","url","getMongoUri","command","usersInfo","users","rolesFilter","getUserRole","user","roles","role","adminDb","admin","listDatabases","databases","name","promise","getAvailableDBsWithAdminDb","filterRoles","all_database_backup_roles","getAvailableDBsWithRoles","database_backup_roles","getDBByName","listCollections","toArray","match","getAvailableDBs","dbNames","reject","getCollectionNamesWithDB","update","multi","strict","operation","updateOne","upsert","w","updateMany","find","readFromCollection","p","e","errors","results","collectionDocs","collectionsDocs","writeToCollection","createCollection","insertMany","deleteMany","dropDatabase","collectionNames","dropCollection","headers","connection","remoteAddress","TaskPool","taskSet","Set","controller","interval","setInterval","scan","add","tasks","getAvailableTasks","executeTask","availableTasks","forEach","now","actionTime","time","push","availTask","getBackupManager","action","BACKUP","details","nextBackupTask","newTask","addTask","nextBackupTimeStr","updateBackupConfigToDB","DELETE_DB","TASKPOOL_KEY","AUTH_ERROR","CODE","taskId","getTaskId","optionalKeys","getNextBackupTime","startTime","nextBackupDateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","backupTotal","PENDING","statistics","total","failures","createdTime","updateBackupConfigFromUpdates","Object","assign","LocalDB","backupConfigDBName","backup_config_db","logsCollectionName","copyDBsCollectionName","tokenCollectionName","backUpConfig","updateDocsInCollection","copyDB","deleteDocs","express","api","bodyParser","logger","responseHandler","tokenHandler","frontend","cookieParser","router","Router","use","json","urlencoded","extended","validate","indexFile","sendFile","publicPath","render","addPath","__dirname","path","io","http","backupController","taskPool","app","createServer","on","listen","setLocalDB","setServerSocket","setController","process","exit","actions","currentBackupCollections","checkBackupAvailable","backupTask","statusBeforeStop","nextBackupTimeBeforeStop","deleteExtraCopyDBs","deleteOverdueCopyDBs","removeAllTasksFromTaskPool","addLog","backupTargetDBName","getTargetBackUpDBName","prevBackupStatus","getBackupCollections","backupCollections","readFromCollections","writeToCollections","backupOnWriteSuccess","backupOnFailure","fromDB","collsDocs","join","prevStatus","nextStatus","removeTasksWithBackupId","backupCopyDBName","dbDuration","duration","deleteTime","addBackupCopyDB","deleteTask","updateBackupConfigAfterBackup","backupResult","lastBackupResult","getNextStatus","lastBackupTime","date","content","level","newLog","eventName","emit","hasOwnProperty","deletedTime","updateCopyDB","copyDBName","newBackupCopyDB","originalDatabase","addCopyDB","deleteCopyDBByIDAndName","deleteDatabase","maxBackupNumber","copyDBsNumber","extraCopyDBs","slice","deleteCopyDBs","clearLogsByID","deleteBackupConfig","userHelper","authError","userController","validateUser","isAdmin","t","cookie","logoutUser","tokens","resp","originalUrl","neededAuthenticated","cookies","undefined","indexOf","backups","post","newBackup","getAllBackupConfigs","runBackup","patch","deleteBackup","params","getAvailableDBsCollections","getBackupCopyDBs","getAllOriginalDBs","getAllBackupCopyDBs","deleteDB","getAllBackupLogs","static"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0df0fc5f416be544d151","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 0\n// module chunks = 0","const server = require('./server.js');\nconst database = require('./database');\nconst auth = require('./auth');\n\nconst config = {\n    server,\n    database,\n    auth\n};\n\nmodule.exports = config;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/config/index.js","const Logger = require('basic-logger');\nconst config = require('modules/config');\n\n// configure level one time, it will be set to every instance of the logger\nLogger.setLevel(config.server.logLevel); // only warnings and errors will be shown\n\nconst customConfig = {\n    showTimestamp: true\n};\n\nconst log = new Logger(customConfig) ;\n\n\nmodule.exports = log;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/utility/logger.js","const response = {\n    error: (body = 'Error occurred.', code = 400) => {\n        if(typeof body === 'object') {\n            return {\n                body: body,\n                code: code\n            };\n        } else {\n            return {\n                body: {\n                    message: body\n                },\n                code: code\n            };\n        }\n    },\n    success: (body = '', code = 200) => {\n        if(typeof body === 'object') {\n            return {\n                body: body,\n                code: code\n            };\n        } else if(!body) {\n            return { code: code };\n        } else {\n            return {\n                body: {\n                    message: body\n                },\n                code: code\n            };\n        }\n    },\n    send: (res, data) => {\n        res.status(data.code).send(data.body);\n    }\n};\n\nmodule.exports = response;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/helper/response.js","const BackupManager = require('modules/backup/backupManager');\nconst object = require('modules/utility/object');\nconst constants = require('modules/constants');\nconst response = require('modules/helper/response');\nconst backupUtil = require('modules/utility/backup');\nconst MongoDB = require('modules/databases/mongoDB');\nconst log = require('modules/utility/logger');\n\n\nclass Controller {\n\n    constructor() {\n        this.localDB = null;\n        this.serverSocket = null;\n        this.backUpsHash = new Map();\n    }\n\n    setLocalDB(localDB) {\n        this.localDB = localDB;\n    }\n\n    setServerSocket(serverSocket) {\n        this.serverSocket = serverSocket;\n    }\n\n    getBackupManager(backupId) {\n        return this.backUpsHash.get(backupId);\n    }\n\n    newBackup(backupConfig, next) {\n        backupConfig.id = backupUtil.getBackupID(backupConfig);\n\n        if (this.backUpsHash.has(backupConfig.id)) {\n            return next(response.error(`Created backup failed: ${ backupConfig.id } has existed`, 409))\n        }\n\n        const backupDB = object.selfish(new MongoDB(backupConfig));\n        const { server, username, authDB, db, collections } = backupConfig;\n\n        backupDB.connect()\n            .catch(err => {\n                next(response.error(`Failed to connected to ${ backupConfig.server }`));\n                throw err\n            })\n            .then(() => {\n                return backupDB.getAvailableBackupCollections()\n            })\n            .then(dbsCollections => {\n                let dbCollections = dbsCollections.filter(dbCollection => {\n                    return dbCollection.db == db;\n                });\n\n                if (dbCollections.length === 0) {\n                    throw new Error(`${ db } doesn't exist in ${ server } or ${ username }@${ authDB } can't backup it`);\n                }\n\n                dbCollections = dbCollections[0];\n\n                if(collections) {\n                    const invalidCollections = collections.filter(collection => {\n                        return !dbCollections.collections.includes(collection);\n                    });\n\n                    if (invalidCollections.length > 0) {\n                        throw new Error(`backup collections ${ invalidCollections } don't exist`);\n                    }\n                }\n\n                backupUtil.updateBackupData(backupConfig);\n                return this.localDB.updateBackupConfig(backupConfig)\n            })\n            .then(() => {\n                log.info(`Created backup config for ${ backupConfig.id }`);\n                const backupManager = object.selfish(new BackupManager(this.localDB, backupConfig, this.serverSocket));\n\n                backupManager.start();\n                this.backUpsHash.set(backupConfig.id, backupManager);\n                this.getBackupStatus(backupConfig.id, next);\n            })\n            .catch(err => {\n                next(response.error(err.message));\n            })\n            .finally(() => {\n                backupDB.close();\n            });\n    }\n\n    runBackup(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`Can't not update a nonexistent backup`))\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n\n        //TODO check backup status here, RUNNING backup can not be run!!!\n\n        backupManager.backup()\n            .then(() => {\n                const nextBackupTime = backupManager.nextBackupTime;\n                const result = {\n                    status: constants.backup.result.SUCCEED,\n                };\n                (nextBackupTime) && (result.nextBackupTime = nextBackupTime);\n                next(response.success(result))\n            })\n            .catch(err => {\n                const nextBackupTime = backupManager.nextBackupTime;\n                const result = {\n                    status: constants.backup.result.FAILED,\n                    reason: err.message\n                };\n                (nextBackupTime) && (result.nextBackupTime = nextBackupTime);\n                next(response.error(result))\n            })\n    }\n\n    restore(backupID, dbName, collections, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`Can't not restore for nonexistent backup id ${ backupID }`));\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n\n        backupManager.restore(dbName, collections)\n            .then(() => {\n                next(response.success(`Successfully restore ${ backupID } from ${ dbName }`))\n            })\n            .catch(err => {\n                console.error(err);\n                next(response.error(`Failed to restore ${ backupID } from ${ dbName } for ${ err.message }`))\n            })\n    }\n\n    updateBackupConfig(backupID, updates, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`Can't not update a nonexistent backup`, 404))\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n\n        backupManager.updateBackupConfig(updates)\n            .then(() => {\n                next(response.success(`Updated backup config for ${ backupID }`));\n            })\n            .catch(err => {\n                next(response.error(`Failed to update backup config for ${ err.message }`));\n            })\n    }\n\n    stop(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`${ backupID } doesn't exist`, 404));\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n        backupManager.stop()\n            .then(() => {\n                next(response.success(`Stopped ${ backupID }`));\n            })\n            .catch(err => {\n                next(response.error(`Failed to stop ${ backupID } for ${ err.message }`));\n            })\n    }\n\n    resume(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`${ backupID } doesn't exist`, 404));\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n        if(backupManager.backupStatus != constants.backup.status.STOP) {\n            return next(response.error(`Failed to resume backup for ${ backupID } for current status is ${ backupManager.backupStatus}`))\n        }\n\n        backupManager.resume()\n            .then(() => {\n                next(response.success(`Resumed backup for ${ backupID } successfully`));\n            })\n            .catch(err => {\n                next(response.error(`Failed to resume backup for ${ err.message }`));\n            })\n    }\n\n    getBackupStatus(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`${ backupID } doesn't exist`, 404));\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n        const status = backupManager.backupStatus;\n        const nextBackupTime = backupManager.nextBackupTime;\n        const result = { status, id: backupID };\n\n        if(status == constants.backup.status.WAITING && nextBackupTime) {\n            result.nextBackupTime = nextBackupTime.toLocaleString();\n        }\n\n        return next(response.success(result));\n    }\n\n    deleteBackup(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`, 404));\n        }\n\n        const backupManager = this.backUpsHash.get(backupID);\n        if(backupManager.backupStatus == constants.backup.status.RUNNING) {\n            return next(response.error(`Failed to delete running backup`));\n        }\n\n        backupManager.clear()\n            .then(() => {\n                this.backUpsHash.delete(backupID);\n                next(response.success(`Successfully deleted ${ backupID }`))\n            })\n            .catch(err => {\n                next(response.error(err,message))\n            })\n    }\n\n    deleteDB(backupID, dbName, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`, 404));\n        }\n\n        this.backUpsHash.get(backupID)\n            .deleteCopyDB(dbName)\n            .then(() => next(response.success(`Successfully deleted ${ dbName }`)))\n            .catch(err => next(response.error(error.message)));\n    }\n\n    deleteCollections(backupID, dbName, collections, next) {\n\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`));\n        }\n\n        this.backUpsHash.get(backupID)\n            .deleteCollections(dbName, collections)\n            .then(() => {\n                next(response.success(`Deleted ${ collections } of ${ dbName } in ${ backupID }`))\n            })\n            .catch(err => {\n                next(response.error(`Failed to deleted ${ collections } in ${ dbName } for ${ err.message }`));\n            })\n    }\n\n    getAvailableDBsCollections(mongoParams, next) {\n        const { server, port, username, password, authDB } = mongoParams;\n        const mongoDB = object.selfish(new MongoDB({server, port, username, password, authDB}));\n\n        mongoDB.connect()\n            .catch(err => {\n                next(response.error(err.message, 401));\n                throw err;\n            })\n            .then(mongoDB.getAvailableBackupCollections)\n            .then(dbCollections => {\n                mongoDB.close();\n                next(response.success(dbCollections))\n            })\n            .catch(err => {\n                mongoDB.close();\n                next(response.error(err.message, 400));\n                throw err;\n            })\n    }\n\n    getCollections(backupID, dbName, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`, 404));\n        }\n\n        this.backUpsHash.get(backupID)\n            .getCollections(dbName)\n            .then(collections => {\n                next(response.success(collections));\n            })\n            .catch(err => {\n                next(response.error(`${ err.message }`));\n            })\n    }\n\n    getDataFromCollection(backupID, dbName, collectionName, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`, 404));\n        }\n\n        this.backUpsHash.get(backupID)\n            .getDataFromCollection(dbName, collectionName, {})\n            .then(docs => {\n                next(response.success(docs))\n            })\n            .catch(err => {\n                next(response.error(`Failed to read data from ${ collectionName } of ${ dbName } for ${ err.message }`));\n            })\n    }\n\n    getAllBackupConfigs(next) {\n        this.localDB.getBackupConfigs()\n            .then(backupConfigs => {\n                next(response.success(backupConfigs))\n            })\n            .catch(err => {\n                next(response.error(`Failed to get all the backup configs for ${ err.message }`))\n            })\n    }\n\n    getBackupConfig(backupId, next) {\n        this.localDB.getBackupConfig(backupId)\n            .then(backupConfigs => {\n                if(backupConfigs.length == 0) {\n                    return next(response.success(null));\n                }\n\n                next(response.success(backupConfigs[0]));\n            })\n            .catch(err => {\n                next(response.error(`Failed to get ${ backupId } backup config for ${ err.message }`));\n            })\n    }\n\n    getBackupCopyDBs(backupID, next) {\n        this.localDB.getBackupCopyDBsWithId(backupID)\n            .then(backupCopyDBs => {\n                next(response.success(backupCopyDBs));\n            })\n            .catch(err => {\n                next(response.error(err.message));\n            })\n    }\n\n    getAllBackupCopyDBs(next) {\n        this.localDB.getAllCopyDBs()\n            .then(copyDBs => {\n                next(response.success(copyDBs))\n            })\n            .catch(err => {\n                next(response.error(`Failed to get all copy dbs for ${ err.message }`));\n            })\n    }\n\n    getAllOriginalDBs(next) {\n        Promise.all([...this.backUpsHash.keys()].map(key => this.backUpsHash.get(key).getOriginalDB()))\n            .then(dbs=> next(response.success(dbs)))\n            .catch(err => next(response.error(err.message)))\n    }\n\n    getOriginalDB(backupID, next) {\n        if(!this.backUpsHash.has(backupID)) {\n            return next(response.error(`backupID ${ backupID } doesn't exist`, 404));\n        }\n\n        this.backUpsHash.get(backupID)\n            .getOriginalDB()\n            .then(db => next(response.success(db)))\n            .catch(err => next(response.error(err.message)))\n\n    }\n\n    getAllBackupLogs(backupID, next) {\n        this.localDB.getBackupLogs(backupID)\n            .then(logs => next(response.success(logs)))\n            .catch(err => next(response.error(err.message)))\n    }\n\n    // when the whole backup system restart, need to read all the\n    // backup config from the local mongoDB and restart the previous\n    // backups\n    restart() {\n        this.localDB.getBackupConfigs()\n            .then(backupConfigs => {\n                if(backupConfigs.length == 0){\n                    return;\n                }\n                backupConfigs.map(backupConfig => {\n                    log.info(`Restarted ${ backupConfig.id } from ${ this.localDB.server } ${ this.localDB.configCollectionName }`);\n                    const backupManager = object.selfish(new BackupManager(this.localDB, backupConfig, this.serverSocket));\n                    log.debug(`Added ${ backupConfig.id } to the backup controller`);\n                    this.backUpsHash.set(backupConfig.id, backupManager);\n                    backupManager.restart();\n                })\n            })\n    }\n}\n\n// make sure there is only one controller in the application\nconst CONTROLLER_KEY = Symbol.for('controller');\n\nif(!global[CONTROLLER_KEY]) {\n    global[CONTROLLER_KEY] = object.selfish(new Controller);\n}\n\nmodule.exports = global[CONTROLLER_KEY];\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/controller/backup.js","let object = {};\n\nobject.selfish = (target) => {\n    const cache = new WeakMap();\n    const handler = {\n        get (target, key) {\n            const value = Reflect.get(target, key);\n            if(typeof value != 'function') {\n                return value;\n            }\n            if(!cache.has(value)) {\n                cache.set(value, value.bind(target));\n            }\n            return cache.get(value);\n        }\n    };\n    const proxy = new Proxy(target, handler);\n    return proxy;\n};\n\n\nobject.deployPromiseFinally = () => {\n    Promise.prototype.finally = function (callback) {\n    const P = this.constructor;\n    return this.then(\n        value  => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason })\n    );\n    };\n};\n\nobject.sortByTime = (objects, key, reverse=false) => {\n    return objects.sort(( a, b) => {\n        let dateA = new Date(a[key]);\n        let dateB = new Date(b[key]);\n        let compare = (dateA > dateB)? 1 : ((dateA < dateB)?-1: 0);\n        return reverse? (compare * -1): compare;\n    })\n};\n\nmodule.exports = object;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/utility/object.js","const backup = require('./backup');\nconst task = require('./task');\n\nconst constants = {\n    backup,\n    task\n};\n\nmodule.exports = constants;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/constants/index.js","const config = require('modules/config');\nconst request = require('modules/helper/request');\n\nconst tokenManager = {\n    \n    localDB: null,\n\n    setDB: localDB => {\n        tokenManager.localDB = localDB;\n    },\n\n    newToken : req => {\n        let token = {};\n\n        token.crt = new Date().valueOf();\n        token.exp_time = token.crt + config.auth.token_exp_time;\n        token.token = tokenManager._generateToken();\n        token.ip = request.getIp(req);\n        token.user_agent = request.getUserAgent(req);\n        token.valid = true;\n\n        return token;\n    },  \n\n    _generateToken: () => {\n        let token = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for(let i = 0; i < 64; ++i) {\n            token += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n\n        return token;\n    },\n\n    setTokenToDB: token => {\n        return tokenManager.localDB.setToken(token);\n    },\n\n    getTokensFromDB: (query) => {\n        return tokenManager.localDB.getToken(query)\n    },\n\n    invalidateTokens: (query) => {\n        return tokenManager.localDB.updateTokens({'$set': {valid: false}}, query);\n    }\n};\n\nmodule.exports = tokenManager;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/auth/token.js","const MongoClient = require('mongodb').MongoClient;\nconst databaseUtil = require('modules/utility/database');\nconst object = require('modules/utility/object');\nconst databaseConfig = require('modules/config').database;\nconst log = require('modules/utility/logger');\n\n\nclass MongoDB {\n\n    constructor({server, port, username, password, authDB='admin'}) {\n        this.db = null;\n        this.dbHash = new Map();\n        this.connections = 0;\n        this.setConnectionParams({server, port, username, password, authDB});\n    }\n\n    setConnectionParams({server, port, username, password, authDB='admin'}) {\n        this.server = server;\n        this.port = port;\n        this.userName = username;\n        this.password = password;\n        this.authDB = authDB;\n        this.url = databaseUtil.getMongoUri(\n            username,\n            password,\n            server,\n            port,\n            authDB\n        );\n        return this;\n    }\n\n    connect() {\n        return Promise.resolve()\n            .then(() => {\n                this.connections++;\n\n                if(this.db) {\n                    return;\n                }\n\n                return MongoClient.connect(this.url)\n                        .then(db => {\n                            log.debug(`connected to ${ this.url }`);\n                            this.db = db;\n                        })\n                        .catch(err => {\n                            log.error(`Failed to connect to ${ this.url } for ${err.message}`);\n                            throw new Error(err);\n                        });\n            });\n    }\n\n    close() {\n        return Promise.resolve()\n            .then(() => {\n                this.connections--;\n\n                if(this.connections > 0) {\n                    log.debug(`Some activities are still running, can't close the mongo connection`);\n                    return;\n                }\n\n                if (this.db == null) {\n                    log.debug(`${ this.url } is not connected`);\n                    return;\n                }\n\n                return this.db.close()\n                    .then(result => {\n                        this.db = null;\n                        this.dbHash.clear();\n                    })\n                    .catch(err => {\n                        log.error(`Failed to close ${ this.url} for ${ err.message }`);\n                        throw err;\n                    })\n            })\n    }\n\n    getUserRole() {\n        return Promise.resolve()\n            .then(() => {\n                return this.db.command({usersInfo: this.userName});\n            })\n            .catch(err => {\n                log.error(`Failed to get ${ this.userName } for ${ err.message }`);\n                throw err;\n            })\n            .then(({users}) => {\n                if (users.length == 0) {\n                    throw new Error(`no user ${ this.userName } found`)\n                }\n\n                return users[0]\n            });\n    }\n\n    getAvailableDBsWithRoles(rolesFilter) {\n        return Promise.resolve()\n            .then(() => {\n                return this.getUserRole();\n            })\n            .then(user => {\n                return user.roles.filter(({role}) => rolesFilter.includes(role))\n                    .map(({db}) => db);\n            });\n    }\n\n    getAvailableDBsWithAdminDb() {\n        return Promise.resolve()\n            .then(() => {\n                const adminDb = this.db.admin();\n                return adminDb.listDatabases()\n            })\n            .then(({databases}) => {\n                return databases.map(({name}) => name)\n            })\n            .catch(err => {\n                log.error(`Failed to get available backup dbs for ${ err.message }`);\n                throw err;\n            });\n    }\n\n    getAvailableDBs() {\n        return Promise.resolve()\n            .then(() => {\n                let promise = null;\n                if (!this.userName) {\n                    promise = this.getAvailableDBsWithAdminDb()\n                } else if (this.authDB == 'admin') {\n                    promise = this.getUserRole()\n                        .then(user => {\n                            const filterRoles = user.roles.filter(\n                                ({role, db}) => (databaseConfig.all_database_backup_roles.includes(role)));\n                            if (filterRoles.length > 0) {\n                                return this.getAvailableDBsWithAdminDb();\n                            } else {\n                                return [];\n                            }\n                        })\n                } else {\n                    promise = this.getAvailableDBsWithRoles(databaseConfig.database_backup_roles)\n                }\n\n                return promise\n            });\n    }\n\n    getCollectionNamesWithDB(dbName) {\n        return Promise.resolve()\n            .then(() => this.getDBByName(dbName).listCollections().toArray())\n            .then(collections => {\n                return  collections.filter(({ name }) => !name.match(/system\\.[\\w+]+/))\n                    .map(({ name }) => name)\n            })\n            .catch(err => {\n                log.error(`Failed to get all ${ dbName } collections for ${ err.message }`);\n                throw err;\n            });\n    }\n\n    getAvailableBackupCollections() {\n        return Promise.resolve()\n            .then(() => {\n                return this.getAvailableDBs()\n            })\n            .then(dbNames => {\n                return Promise.all(dbNames.map(\n                    dbName => {\n                        return new Promise((resolve, reject) => {\n                            this.getCollectionNamesWithDB(dbName)\n                                .then(collections => resolve({db: dbName, collections}))\n                                .catch(err => reject(err))\n                        });\n                    }\n                ));\n            });\n    }\n\n    updateDocsInCollection(dbName, collectionName, update, query, multi= false) {\n        return new Promise((resolve, reject) => {\n            this.getDBByName(dbName).collection(collectionName, {strict: false},\n                (err, collection) => {\n                    if(err) {\n                        return reject(err);\n                    }\n\n                    let operation = null;\n\n                    if(!multi) {\n                        operation = collection.updateOne(query, update, { upsert: true, w: 1 });\n                    }else {\n                        operation = collection.updateMany(query, update, { upsert: false })\n                    }\n\n                    operation.then(result => {\n                                  resolve();\n                              })\n                              .catch(err => {\n                                  reject(err);\n                              })\n            } )\n        })\n    }\n\n    readFromCollection(dbName, collectionName, filter) {\n        return new Promise((resolve, reject) => {\n            this.getDBByName(dbName).collection(collectionName, {strict: false},\n                (err, collection) => {\n                    if(err) {\n                        return reject(err);\n                    }\n                    collection.find(filter).toArray((err, docs) => {\n                        if(err) {\n                            return reject(err);\n                        }\n                        resolve(docs);\n                    })\n            })\n        })\n    }\n\n    readFromCollections(db, collections) {\n        return Promise.resolve()\n            .then(() => {\n                return Promise.all(collections.map(collection => {\n                        return Promise.resolve()\n                            .then(() => this.readFromCollection(db, collection, {}) )\n                            .then(docs => {\n                                log.debug(`Read from ${collection} of ${ db }`);\n                                return { collection, docs };\n                            })\n                            .catch(err => {\n                                log.error(`Failed to read from ${collection} of ${ db } for ${ err.message }`);\n                                throw err\n                            });\n                    }).map(p => p.catch(e => e)))\n            })\n            .then(results => {\n                const errors = results.filter(collectionDocs => collectionDocs instanceof Error);\n\n                if(errors.length > 0) {\n                    log.error(`Failed to read all the data from ${ collections } of ${ db } for ${errors[0].message}`);\n                    throw errors[0];\n                }\n\n                log.debug(`Finished read data from the ${ collections } of ${ db }`);\n                return results;\n            });\n    }\n\n    writeToCollections(db, collectionsDocs) {\n        return Promise.resolve()\n            .then(() => {\n                return Promise.all(\n                    collectionsDocs.map(collectionDocs => {\n                            return Promise.resolve()\n                                .then(() => {\n                                    const {collection, docs} = collectionDocs;\n                                    return this.writeToCollection(db, collection, docs)\n                                })\n                        }).map(p => p.catch(e => e)))\n            })\n            .then(results => {\n                const errors = results.filter(result => result instanceof Error);\n                if(errors.length > 0) {\n                    log.error(`Failed to backup all the data to ${ db } for ${errors[0].message}`);\n                    throw errors[0];\n                }\n                log.debug(`wrote all the data to ${ db }`);\n            })\n    }\n\n    writeToCollection(dbName, collectionName, docs) {\n        return new Promise((resolve, reject) => {\n            this.getDBByName(dbName).collection(collectionName, {strict: false},\n                (err, collection) => {\n\n                    if(err) {\n                        log.err(`Failed to write for ${ collectionName } of ${ dbName } for ${ err.message }`);\n                        return reject(err);\n                    }\n\n                    if(docs.length == 0) {\n                        log.debug(`${ collectionName } is empty`);\n                        this.getDBByName(dbName).createCollection(collectionName)\n                            .then(() => {\n                                log.debug(`Created empty ${ collectionName } in ${ dbName }`);\n                                resolve();\n                            })\n                            .catch(err => {\n                                log.error(`Failed to create empty ${ collectionName } in ${ dbName } for ${ err.message }`);\n                                reject(err);\n                            });\n                    }\n\n                    else {\n                        collection.insertMany(docs)\n                            .then(result => {\n                                log.debug(`Wrote to ${ collectionName } of ${ dbName }`);\n                                resolve();\n                            })\n                            .catch(err => {\n                                log.error(`Failed to write to ${ collectionName } of ${ dbName } for ${ err.message }`);\n                                reject(err);\n                            })\n                    }\n            })\n        })\n    }\n\n    deleteDocs(dbName, collectionName, filter) {\n        return new Promise((resolve, reject) => {\n            this.getDBByName(dbName).collection(collectionName, {strict: false},\n                (err, collection) => {\n                    if(err) {\n                        log.error(`Failed to delete docs for ${ err.message }`);\n                        return reject(err);\n                    }\n\n                    collection.deleteMany(filter)\n                        .then(() => {\n                            resolve()\n                        })\n                        .catch(err => {\n                            log.error(`Failed to delete docs with ${ filter } for ${ err.message }`);\n                            return reject(err);\n                        })\n            })\n        })\n    }\n\n    deleteDatabase(dbName) {\n        return Promise.resolve()\n            .then(() => {\n                return this.getDBByName(dbName).dropDatabase()\n            });\n    }\n\n    deleteCollections(dbName, collectionNames) {\n        return Promise.all(collectionNames.map(collectionName => {\n            return this.getDBByName(dbName).dropCollection(collectionName)\n                       .catch(err => {\n                           // when the collection doesn't exist the delete action will throw a 'ns not found' error,\n                           // need to skip this error\n                           if(!err.message.includes('ns not found')) {\n                               throw err\n                           }\n                       });\n        }))\n    }\n\n    getDBByName(dbName) {\n        if(!this.dbHash.has(dbName)) {\n            this.dbHash.set(dbName, this.db.db(dbName));\n        }\n\n        return this.dbHash.get(dbName);\n    }\n}\n\nmodule.exports = MongoDB;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/databases/mongoDB.js","const request = {\n\n    getIp: req => {\n        // get user ip adress from the request object\n        return req.ip || \n               req.headers['x-forwarded-for'] || \n               req.connection.remoteAddress;\n    },\n\n    getUserAgent: req => {\n        return req.headers['user-agent'];\n    }\n}\n\nmodule.exports = request;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/helper/request.js","const object = require(\"modules/utility/object\");\nconst log = require('modules/utility/logger');\nconst task = require('modules/task/task');\nconst constants = require('modules/constants');\n\n\nclass TaskPool {\n\n    constructor() {\n        this.taskSet = new Set();\n    }\n\n    setController(controller) {\n        this.controller = controller;\n    }\n\n    start(interval) {\n        setInterval(this.scan.bind(this), interval);\n    }\n\n    removeTasksWithBackupId(backupId) {\n        this.taskSet = new Set(\n            [...this.taskSet].filter(task => {\n                return task.backupId !== backupId\n            })\n        )\n    }\n\n    addTask(task) {\n        this.taskSet.add(task)\n    }\n\n    scan() {\n        log.debug(`Start scanning the task pool at ${ new Date().toLocaleString() }`);\n        log.debug('whole task', this.taskSet);\n        const tasks = this.getAvailableTasks();\n        log.debug('avaliable task', tasks);\n        for(let task of tasks) {\n            this.executeTask(task);\n        }\n    }\n\n    getAvailableTasks() {\n        let availableTasks = [];\n\n        this.taskSet.forEach( task => {\n            const now = new Date();\n            const actionTime = new Date(task.time);\n\n            if(now >= actionTime) {\n                availableTasks.push(task);\n                this.taskSet.delete(task);\n            }\n        })\n\n        return availableTasks;\n    }\n\n    executeTask(availTask) {\n        const backupManager = this.controller.getBackupManager(availTask.backupId);\n\n        if(!backupManager) {\n            log.error(`${ availTask.backupId } doesn't exist!`)\n            return;\n        }\n\n        switch (availTask.action) {\n            case constants.task.BACKUP:\n                // backup \n                backupManager.backup();\n\n                const interval = availTask.details.interval;\n                if(interval) {\n                    const nextBackupTime = new Date().valueOf() + interval;\n                    \n                    const nextBackupTask = task.newTask(availTask.backupId, nextBackupTime, constants.task.BACKUP, {interval});\n                    this.addTask(nextBackupTask);\n                    \n                    const nextBackupTimeStr = new Date(nextBackupTime).toLocaleString();\n                    backupManager.updateBackupConfigToDB({nextBackupTime: nextBackupTimeStr});\n                }\n\n                break;\n\n            case constants.task.DELETE_DB:\n                const dbName = availTask.details.dbName;\n                backupManager.deleteCopyDB(dbName);\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n// make sure there is only one task pool in the application\nconst TASKPOOL_KEY = Symbol.for('taskPool');\n\nif(!global[TASKPOOL_KEY]) {\n    global[TASKPOOL_KEY] = object.selfish(new TaskPool);\n}\n\nmodule.exports = global[TASKPOOL_KEY];\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/task/taskPool.js","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 11\n// module chunks = 0","const auth = {\n    AUTH_ERROR: 'authentication error',\n    CODE: 401,\n}\n\nmodule.exports = auth;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/error/auth.js","const task = {\n\n    newTask: (backupId, time, action, details) => {\n        let taskId = task.getTaskId();\n\n        return {\n            id: taskId,\n            backupId,\n            time,\n            action,\n            details\n        }\n    },\n\n    getTaskId: () => {\n        let id = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n        for(let i = 0; i < 64; ++i) {\n            id += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n\n        return id;\n    }\n\n};\n\nmodule.exports = task;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/task/task.js","/*\n    backup configuration:\n\n    {\n         id: crcdashboard@localhost,\n         server: localhost,\n         port: 27017,\n         username: admin,\n         password: admin,\n         authDB: admin,\n         db: crc,\n         collections: [], // if not specified will backup all the collections\n         startTime: the time of backup started, if not specified, started right now\n         interval: millisecond interval for backup\n         maxBackupNumber: 7// integer\n         duration: millisecond of how long will the backup expire\n    }\n\n    backup_id: db_name@server\n\n    backup databases\n\n    {\n          id: crcdashboard@localhost,\n          originalDatabase: {\n              server: localhost,\n              database: crcdashboard\n         }\n          name: crcdashboard@localhost-timestamp,\n          collections: [], the collection in the backup\n\n          created_time: the time of the backup created\n          deleted_time: the time of the backup will be deleted, calculated by duration time,\n    }\n\n    logs\n\n    {\n         id: crcdashboard@localhost,\n         logs:[\n             timestamp: the timestamp of the logging infomation,\n             content: created backup configuration, deleted backup configuration, stop backup, backup successfully, backup failed: error message,                                  deleted database successfully, retore database successfully\n         ]\n    }\n */\nconst constants = require('modules/constants');\n\nconst backupUtil = {\n\n    optionalKeys: ['collections', 'startTime', 'interval', 'maxBackupNumber', 'duration'],\n\n    getBackupID: (backupConfig) => {\n        return `${ backupConfig.db }@${ backupConfig.server }`;\n    },\n\n    getNextBackupTime: (backupConfig) => {\n        let { startTime, nextBackupTime } = backupConfig;\n\n        const now = new Date();\n\n        // try to get nextBackup time from nextBackupTime first\n        if(nextBackupTime) {\n            const nextBackupDateTime = new Date(nextBackupTime);\n            if(nextBackupDateTime > now) {\n                return nextBackupDateTime\n            }\n        }\n\n        if(startTime) {\n            startTime = new Date(startTime);\n\n            // if the original startTime has past, change it to today\n            if(startTime < now) {\n                startTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(),\n                    startTime.getHours(), startTime.getMinutes(), startTime.getSeconds(), startTime.getMilliseconds());\n\n                if(startTime < now ) {\n                    // next Day\n                    startTime = new Date(startTime.valueOf() + 24*60*60*1000);\n                }\n            }\n        }\n\n        if(!startTime) {\n            startTime = now;\n        }\n\n        return startTime;\n    },\n\n    updateBackupData(backupConfig) {\n        if(backupConfig.backupTotal == null) {\n            backupConfig.status = constants.backup.status.PENDING;\n            backupConfig.statistics = {\n                total: 0,\n                success: 0,\n                failures: 0\n            };\n\n            backupConfig.createdTime = new Date().toLocaleString();\n        }\n    },\n\n    updateBackupConfigFromUpdates(backupConfig, updates) {\n        Object.assign(backupConfig, updates);\n        // remove the optional key from backupConfig if necessary\n        backupUtil.optionalKeys.forEach(key => {\n            if(!(key in updates) && (key in backupConfig)) {\n                delete backupConfig[key];\n            }\n        })\n    }\n};\n\nmodule.exports = backupUtil;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/utility/backup.js","const MongoDB = require('modules/databases/mongoDB');\nconst databaseConfig = require('modules/config').database;\n\n\nclass LocalDB extends MongoDB {\n\n    constructor({server, port, username, password, authDB='admin'}) {\n        super({ server, port, username, password, authDB });\n        this.backupConfigDBName = databaseConfig.backup_config_db || 'backup_config';\n        this.configCollectionName = \"configurations\";\n        this.logsCollectionName = \"logs\";\n        this.copyDBsCollectionName = \"copyDatabases\";\n        this.tokenCollectionName = \"tokens\";\n    }\n\n    getBackupConfigs() {\n        return this.readFromCollection(this.backupConfigDBName, this.configCollectionName, { });\n    }\n\n    getBackupConfig(backupID) {\n        return this.readFromCollection(this.backupConfigDBName, this.configCollectionName, {id: backupID })\n    }\n\n    getAllCopyDBs() {\n        return this.readFromCollection(this.backupConfigDBName, this.copyDBsCollectionName, { });\n    }\n\n    getBackupCopyDBsWithId(backupID) {\n        return this.readFromCollection(this.backupConfigDBName, this.copyDBsCollectionName, { id: backupID } );\n    }\n\n    getBackupLogs(backupID) {\n        return this.readFromCollection(this.backupConfigDBName, this.logsCollectionName, { id: backupID });\n    }\n\n    updateBackupConfig(backUpConfig) {\n        return this.updateDocsInCollection(this.backupConfigDBName, this.configCollectionName, backUpConfig, { id: backUpConfig.id })\n    }\n\n    updateCopyDB(copyDB) {\n        return this.updateDocsInCollection(this.backupConfigDBName, this.copyDBsCollectionName, copyDB, { id: copyDB.id, name: copyDB.name })\n    }\n\n    addCopyDB(copyDB) {\n        return this.writeToCollection(this.backupConfigDBName, this.copyDBsCollectionName, [copyDB])\n    }\n\n    addLog(log) {\n        return this.writeToCollection(this.backupConfigDBName, this.logsCollectionName, [log]);\n    }\n\n    deleteCopyDBByIDAndName(id, name){\n        return this.deleteDocs(this.backupConfigDBName, this.copyDBsCollectionName, { id, name });\n    }\n\n    deleteBackupConfig(id) {\n        return this.deleteDocs(this.backupConfigDBName, this.configCollectionName, { id })\n    }\n\n    clearLogsByID(id) {\n        return this.deleteDocs(this.backupConfigDBName, this.logsCollectionName, { id })\n    }\n\n    setToken(token) {\n        return this.writeToCollection(this.backupConfigDBName, this.tokenCollectionName, [token]);\n    }\n\n    getToken(query) {\n        return this.readFromCollection(this.backupConfigDBName, this.tokenCollectionName, query);\n    }\n\n    updateTokens(update, query) {\n        return this.updateDocsInCollection(this.backupConfigDBName, this.tokenCollectionName, update, query, true);\n    }\n}\n\nmodule.exports = LocalDB;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/databases/localDB.js","const express = require('express');\nconst api = require('modules/router/api');\nconst bodyParser = require('body-parser');\nconst logger = require('modules/middleware/logger');\nconst responseHandler = require('modules/middleware/response_handler');\nconst tokenHandler = require('modules/middleware/token_handler');\nconst frontend = require('./frontend');\nconst user = require('./user');\nconst cookieParser = require('cookie-parser');\nconst router = express.Router();\n\nrouter.use(bodyParser.json());\nrouter.use(bodyParser.urlencoded({ extended: true }));\nrouter.use(cookieParser());\n\n//router.use('/', logger);\nrouter.use(tokenHandler.validate);\n\nrouter.get('/', (req, res) => {\n    console.log(frontend.indexFile);\n   res.sendFile(frontend.indexFile);\n});\n\nrouter.use('/dist', frontend.publicPath);\n\nrouter.use('/api', api);\n\nrouter.use('/user', user);\n\nrouter.use(responseHandler);\n\nrouter.use(function(err, req, res, next) {\n  console.log(err);\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\nmodule.exports = router;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/index.js","module.exports = require(\"app-module-path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"app-module-path\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 18\n// module chunks = 0","module.exports = require(\"socket.io\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"socket.io\"\n// module id = 19\n// module chunks = 0","require('app-module-path').addPath(__dirname);\n\nconst path = require('path');\nconst express = require('express');\nconst io = require('socket.io');\nconst http = require('http');\n\n\nconst router = require('modules/router');\nconst config = require('modules/config');\nconst object = require('modules/utility/object');\nconst LocalDB = require('modules/databases/localDB');\nconst backupController = require('modules/controller/backup');\nconst tokenManager = require('modules/auth/token');\nconst log = require('modules/utility/logger');\nconst taskPool = require('modules/task/taskPool');\n\nconst app = express();\nconst server = http.createServer(app);\nconst serverSocket = io(server);\n\nobject.deployPromiseFinally();\n\nserverSocket.on('connection', () => {\n   console.log('connected');\n});\n//Routers\napp.use('/', router);\n\nconst localDB = object.selfish(new LocalDB(config.database));\n\nlocalDB.connect()\n       .then(() => {\n           server.listen(config.server.port, (err, result) => {\n               if(err) {\n                   log.error(`Failed to start the server for ${ err.message }`)\n               }else {\n                   log.info(`Listening at ${config.server.port}`);\n                   \n                   backupController.setLocalDB(localDB);\n                   backupController.setServerSocket(serverSocket);\n                   taskPool.setController(backupController);\n\n                   tokenManager.setDB(localDB);\n\n                   backupController.restart();\n                   taskPool.start(config.server.interval);\n               }\n           });\n       })\n       .catch(err => {\n           localDB.close();\n           process.exit(1);\n       });\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/app.js","const constants = require('modules/constants');\nconst log = require('modules/utility/logger');\nconst config = require('modules/config');\nconst MongoDB = require('modules/databases/mongoDB');\nconst object = require('modules/utility/object');\nconst backupUtil = require('modules/utility/backup');\nconst task = require('modules/task/task');\nconst taskPool = require('modules/task/taskPool');\nconst actions = require('modules/constants/')\n\nclass BackupManager {\n\n    constructor(localDB, backupConfig, serverSocket) {\n        this.backupDB = object.selfish(new MongoDB(backupConfig));\n        this.localDB = localDB;\n        this.serverSocket = serverSocket;\n        this.backupConfig = backupConfig;\n        this.currentBackupCollections = null;\n    }\n\n    get backupStatus() {\n        return this.backupConfig.status;\n    }\n\n    get nextBackupTime() {\n        return this.backupConfig.nextBackupTime;\n    }\n\n    start() {\n        if (!this.checkBackupAvailable()) {\n            return;\n        }\n\n        const nextBackupTime = backupUtil.getNextBackupTime(this.backupConfig);\n        this.updateBackupConfigToDB(\n                    {\n                        nextBackupTime: nextBackupTime? nextBackupTime.toLocaleString(): null ,\n                        status: constants.backup.status.WAITING\n                    }\n                );\n            \n        const backupTask = task.newTask(this.backupConfig.id, \n                                        nextBackupTime.valueOf(), \n                                        constants.task.BACKUP, \n                                        {interval: this.backupConfig.interval});\n            \n        taskPool.addTask(backupTask);        \n    }\n\n    resume() {\n        // go back to the status before stop\n        return this.updateBackupConfigToDB(\n            {\n                status: this.backupConfig.statusBeforeStop,\n                nextBackupTime: this.backupConfig.nextBackupTimeBeforeStop\n            })\n            .then(() => this.restart())\n    }\n\n    restart() {\n        if(this.backupStatus == constants.backup.status.STOP) {\n            return;\n        }\n\n        this.start();\n        this.deleteExtraCopyDBs();\n        this.deleteOverdueCopyDBs();\n    }\n\n    checkBackupAvailable() {\n        if(this.backupStatus == constants.backup.status.STOP) {\n            return false\n        }\n\n        return true;\n    }\n\n    stop() {\n        return Promise.resolve()\n            .then(() => {\n                if(this.backupStatus == constants.backup.status.RUNNING) {\n                    throw new Error('Failed to stop backup schedule, because backup is still running');\n                }\n            }) \n            .then(() => this.backupDB.close())\n            .then(() => {\n                return this.updateBackupConfigToDB(\n                    {\n                        status:constants.backup.status.STOP,\n                        nextBackupTime: null,\n                        nextBackupTimeBeforeStop: this.backupConfig.nextBackupTime,\n                        statusBeforeStop: this.backupConfig.status\n                    }\n                );\n            })\n            .then(() => {\n                this.removeAllTasksFromTaskPool();\n                return this.addLog(`Stop all the backup tasks`);\n            })\n            .catch(err => {\n                this.addLog(`Failed to stop backup for ${ err.message }`, 'error');\n                throw err;\n            })\n    }\n\n    backup() {\n        const now = new Date();\n        const backupTargetDBName = this.getTargetBackUpDBName(now);\n        const prevBackupStatus = this.backupConfig.status;\n\n\n        return Promise.resolve()\n            .then(() => {\n                if(prevBackupStatus == constants.backup.status.RUNNING) {\n                    throw new Error(`backup is running`);\n                }\n\n                return this.addLog(`Start to backup ${ this.backupConfig.db }`);\n            })\n            .then( this.backupDB.connect )\n            .then(() => {\n                return this.updateBackupConfigToDB({status: constants.backup.status.RUNNING});\n            })\n            .then(() => {\n                return this.getBackupCollections();\n            })\n            .then(backupCollections => {\n                log.debug(`Successfully get backup collections ${ backupCollections } from ${ this.backupConfig.db }`);\n\n                this.currentBackupCollections = backupCollections;\n                return this.backupDB.readFromCollections(this.backupConfig.db, backupCollections)\n            })\n            .then(collectionsDocs => {\n                this.backupDB.close()\n                    .then(() => log.debug(`Closed ${ this.backupDB.url }`))\n                    .catch(err => log.error(`Failed to close ${ this.backupDB.url } for ${ err.message }`));\n                return this.localDB.writeToCollections(backupTargetDBName, collectionsDocs)\n            })\n            .then(() => {\n                return this.backupOnWriteSuccess(prevBackupStatus, backupTargetDBName)\n            })\n            .catch(err => {\n                this.backupOnFailure(prevBackupStatus, err, backupTargetDBName)\n                throw err;\n            })\n    }\n\n    restore(fromDB, collections) {\n        return this.backupDB\n                    .connect()\n                    .then(() => this.localDB.readFromCollections(fromDB, collections))\n                    .then(collsDocs => {\n                        return this.backupDB.deleteCollections(this.backupConfig.db, collections)\n                                   .then(() => this.backupDB.writeToCollections(this.backupConfig.db, collsDocs))\n                    })\n                    .then(() => {\n                        return this.addLog(`Retored ${ collections.join(' and ') } from ${ fromDB } to the ${ this.backupConfig.id } successfully`);\n                    })\n                    .catch(err => {\n                        this.addLog(`Failed to restore ${ collections.join(' and ') } from ${ fromDB } to ${ this.backupConfig.id } for ${ err.message }`);\n                        throw err;\n                    })\n                    .finally(() => {\n                        this.backupDB.close()\n                    })\n\n    }\n\n    getNextStatus(prevStatus) {\n        let nextStatus = prevStatus;\n\n        if(prevStatus == constants.backup.status.WAITING && !this.backupConfig.interval) {\n            nextStatus = constants.backup.status.PENDING;\n        }\n\n        return nextStatus;\n    }\n\n    removeAllTasksFromTaskPool() {\n        taskPool.removeTasksWithBackupId(this.backupConfig.id);\n    }\n\n    backupOnWriteSuccess(prevStatus, backupCopyDBName) {\n        const now = new Date();\n        const dbDuration = this.backupConfig.duration;\n        const deleteTime = dbDuration ? new Date(now.valueOf() + dbDuration) : null;\n\n        return this.addBackupCopyDB(backupCopyDBName, now, deleteTime)          \n            .then(() => {\n                return this.addLog(`Backup ${ this.backupConfig.db } to ${ backupCopyDBName } successfully`);\n            })\n            .then(() => {\n                return this.deleteExtraCopyDBs();\n            })\n            .then(() => {                \n                if( deleteTime ) {\n                    const deleteTask = task.newTask(this.backupConfig.id,\n                                                    deleteTime.valueOf(),\n                                                    constants.task.DELETE_DB,\n                                                    {dbName: backupCopyDBName});\n                    taskPool.addTask(deleteTask);\n\n                    log.debug(`${ backupCopyDBName } will be deleted at ${ deleteTime.toLocaleString() }`);\n                }\n\n                return this.updateBackupConfigAfterBackup(prevStatus, constants.backup.result.SUCCEED);\n            })\n            .catch(err => {\n                throw err;\n            });\n    }\n\n    backupOnFailure(prevStatus, err, backupCopyDBName) {\n        this.addLog(`Backup ${ this.backupConfig.db } failed for ${ err.message }`, \"error\");\n        return this.updateBackupConfigAfterBackup(prevStatus, constants.backup.result.FAILED)\n                   .finally(() => {\n                        this.localDB.deleteCopyDB(backupCopyDBName);\n                   })\n    }\n\n    updateBackupConfigAfterBackup(prevStatus, backupResult) {\n        const statistics = this.backupConfig.statistics;\n        statistics.total += 1;\n\n        if(backupResult === constants.backup.result.SUCCEED) {\n            statistics.success += 1;\n        }else {\n            statistics.failures += 1;\n        }\n\n        const lastBackupResult = backupResult;\n        const nextStatus = this.getNextStatus(prevStatus);\n        const lastBackupTime = new Date().toLocaleString();\n\n        const updates = {\n            lastBackupResult,\n            statistics,\n            status: nextStatus,\n            lastBackupTime\n        };\n\n        return this.updateBackupConfigToDB(updates);\n    }\n\n    getTargetBackUpDBName(date) {\n        return `${ this.backupConfig.db }-${ date.valueOf() }`\n    }\n\n    getBackupCollections() {\n        return new Promise((resolve, reject) => {\n            if(this.backupConfig.collections) {\n                return resolve(this.backupConfig.collections);\n            }\n\n            this.backupDB.getCollectionNamesWithDB(this.backupConfig.db)\n                .then(collections => {\n                    resolve(collections);\n                })\n                .catch(err => {\n                    reject(err);\n                })\n        })\n    }\n\n    getOriginalDB() {\n        return this.backupDB.connect()\n            .then(() => this.backupDB.getCollectionNamesWithDB(this.backupConfig.db))\n            .then(collections => {\n                return {\n                    id: this.backupConfig.id,\n                    db: this.backupConfig.db,\n                    collections\n                }\n            })\n            .finally(() => {\n                this.backupDB.close();\n            })\n    }\n\n    getCollections(dbName) {\n        if(dbName != this.backupConfig.db) {\n            return this.localDB.getCollectionNamesWithDB(dbName)\n                .then(collections => {\n                    return {db: dbName, collections};\n                })\n        }\n\n        return this.backupDB.connect()\n            .then(() => {\n                return this.backupDB.getCollectionNamesWithDB(this.backupConfig.db);\n            })\n            .then(collections => {\n                return {id: this.backupConfig.id, db: dbName, collections};\n            })\n            .finally(() => {\n                this.backupDB.close();\n            })\n    }\n\n    getDataFromCollection(dbName, collectionName, filter) {\n        if(dbName != this.backupConfig.db) {\n            return this.localDB.readFromCollection(dbName, collectionName, filter)\n        }\n\n        return this.backupDB.connect()\n            .then(() => {\n                return this.backupDB.readFromCollection(dbName, collectionName, filter);\n            })\n            .finally(() => {\n                this.backupDB.close();\n            })\n    }\n\n    addLog(content, level=\"info\") {\n        const newLog = {\n            id: this.backupConfig.id,\n            level: level,\n            time: new Date().valueOf(),\n            content: content\n        };\n        this.localDB.addLog(newLog)\n            .then(() => {\n                log.debug(`Added log ${ this.backupConfig.id }`);\n            })\n            .catch(err => {\n                log.error(`Failed to add log for ${ this.backupConfig.id } for ${ err.message }`);\n                throw err;\n            })\n            .finally(() => {\n                let eventName = this.backupConfig.id + '-logs';\n                this.serverSocket.emit(eventName)\n            });\n    }\n\n    updateBackupConfig(updates) {\n        // when update the backupConfig first\n        // need to stop all the current activities\n        const { id, duration } = this.backupConfig;\n        backupUtil.updateBackupConfigFromUpdates(this.backupConfig, updates);\n\n        return Promise.resolve()\n            .then(() => {\n                return this.stop();\n            })\n            .then(() => {\n                // use the update method provied by the localDB\n                // for this kind of update\n                return this.localDB.updateBackupConfig(this.backupConfig)\n            })\n            .then(() => {\n                this.serverSocket.emit('backupConfigs', id)\n            })\n            .then(() => {\n                this.backupDB.setConnectionParams(this.backupConfig);\n                return this.updateBackupConfigToDB({status: constants.backup.status.PENDING});\n            })\n            .then(() => {\n                if(updates.hasOwnProperty('duration') && \n                   updates.duration !== duration) {\n                        return this.localDB.getBackupCopyDBsWithId(id);\n                }else {\n                    return;\n                }\n            })\n            .then(dbs =>{\n                if(dbs == null) {\n                    return;\n                }\n\n                dbs.forEach(db => {\n                    db.deletedTime =  updates.duration? new Date(new Date(db.createdTime).valueOf() + updates.duration).toLocaleString() : null;\n                });\n\n                return Promise.all(dbs.map(db => {\n                    return this.localDB.updateCopyDB(db);\n                }))\n            })\n            .then(() => {\n                // notifiy the client side that copy dbs has been changed\n                this.serverSocket.emit('copyDBs', id);\n            })\n            .then(() => {\n                return this.restart();\n            })\n    }\n\n    updateBackupConfigToDB(updates) {\n        Object.assign(this.backupConfig, updates);\n        return this.localDB.updateBackupConfig(this.backupConfig)\n                    .finally(() => {\n                        this.serverSocket.emit('backupConfigs', this.backupConfig.id);\n                    });\n    }\n\n    addBackupCopyDB(copyDBName, createdTime, deletedTime) {\n        const newBackupCopyDB = {\n            id: this.backupConfig.id,\n            originalDatabase: {\n                server: this.backupConfig.server,\n                database: this.backupConfig.db\n            },\n            name: copyDBName,\n                collections: this.currentBackupCollections,\n                createdTime: createdTime.toLocaleString(),\n                deletedTime: deletedTime.toLocaleString()\n        };\n        return this.localDB.addCopyDB(newBackupCopyDB)\n            .finally(() => {\n                this.serverSocket.emit('copyDBs', this.backupConfig.id);\n            });\n    }\n\n    deleteCopyDB(dbName) {\n        log.debug(`Started to delete ${ dbName }`);\n        return this.localDB.deleteCopyDBByIDAndName(this.backupConfig.id, dbName)\n            .then(() => {\n                return this.localDB.deleteDatabase(dbName);\n            })\n            .then(() => {\n                const now = new Date();\n                return this.addLog(`Deleted ${ dbName } at ${ now.toLocaleString() }`)\n            })\n            .catch(err => {\n                this.addLog(`Failed to delete ${ dbName } for ${ err.message }`, \"error\");\n                throw err;\n            })\n            .finally(() => {\n                this.serverSocket.emit('copyDBs', this.backupConfig.id);\n            });\n    }\n\n    deleteCopyDBs(dbs) {\n        // best effort delete dbs\n        log.debug(`Started to delete ${ dbs }`);\n        if(dbs.length == 0) {\n            return Promise.resolve();\n        }\n        return Promise.all(dbs.map(db => {\n            return this.deleteCopyDB(db)\n        }))\n    }\n\n    deleteCollections(dbName, collections) {\n        if(dbName != this.backupConfig.db) {\n            return this.localDB.deleteCollections(dbName, collections)\n                .then(() => {\n                    return this.addLog(`Deleted ${ collections } of ${ dbName }`);\n                })\n                .catch(err => {\n                    this.addLog(`Failed to delete ${ collections } of ${ dbName } for ${ err.message } `, 'error');\n                    throw err;\n                })\n        }\n\n        return this.backupDB.connect()\n            .then(() => {\n                return this.backupDB\n                    .deleteCollections(this.backupConfig.db, collections)\n            })\n            .finally(() => {\n                this.backupDB.close();\n            });\n    }\n\n    deleteExtraCopyDBs() {\n        return new Promise((resolve, reject) => {\n            const { maxBackupNumber } = this.backupConfig;\n\n            if(!maxBackupNumber) {\n                return resolve();\n            }\n\n            this.localDB.getBackupCopyDBsWithId(this.backupConfig.id)\n                .then(backupCopyDBs => {\n                    const copyDBsNumber = backupCopyDBs.length;\n                    if(copyDBsNumber <= maxBackupNumber) {\n                        return resolve();\n                    }\n                    log.debug(`Start to deleted ${ copyDBsNumber - maxBackupNumber } extra DBs`);\n                    backupCopyDBs = object.sortByTime(backupCopyDBs, \"createdTime\", true);\n                    const extraCopyDBs = backupCopyDBs.slice(maxBackupNumber, copyDBsNumber);\n                    return Promise.all(extraCopyDBs.map(copyDB => {\n                        return this.deleteCopyDB(copyDB['name']);\n                    }))\n                })\n                .then(() => {\n                    resolve();\n                })\n                .catch(err => {\n                    this.addLog(`Failed to deleted extra backup copies for ${ err.message }`, 'error');\n                    reject(err);\n                })\n        })\n    }\n\n    deleteOverdueCopyDBs() {\n        return Promise.resolve()\n            .then(() => {\n                return this.localDB.getBackupCopyDBsWithId(this.backupConfig.id);\n            })\n            .then(backupCopyDBs => {\n                return Promise.all(backupCopyDBs.map(copyDB => {\n                    const deletedTime = copyDB['deletedTime'];\n                    const dbName = copyDB['name'];\n                    if(deletedTime) {\n                        const deleteTask = task.newTask(this.backupConfig.id,\n                                                        deletedTime,\n                                                        constants.task.DELETE_DB,\n                                                        {dbName});\n                        taskPool.addTask(deleteTask);\n                        log.debug(`${ dbName } will be deleted at ${ deletedTime }`);\n                    }\n                    return Promise.resolve();\n                }))\n            })\n            .catch(err => {\n                log.error(`Failed to deleted all the overdue databases for ${ this.backupConfig.id } for ${ err.message }`);\n                throw err;\n            })\n    }\n\n    clear() {\n        // clear logic, clear log, dbs,\n        const id = this.backupConfig.id;\n\n        return this.stop()\n            .then(() => this.localDB.getBackupCopyDBsWithId(id))\n            .then(dbs =>  this.deleteCopyDBs(dbs.map(db => db.name)))\n            .then(() => this.localDB.clearLogsByID(id))\n            .then(() => this.localDB.deleteBackupConfig(id))\n            .finally(() => {\n                this.serverSocket.emit('backupConfigs', this.backupConfig.id)\n            })\n    }\n}\n\nmodule.exports = BackupManager;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/backup/backupManager.js","const auth = {\n    username: 'admin',\n    password: 'admin',\n    token_exp_time: 24 * 60 * 60 * 1000\n}\n\nmodule.exports = auth;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/config/auth.js","const database = {\n    server: 'localhost',\n    port: 27017,\n    // username: 'supervisor',\n    // password: '137800',\n    backup_config_db: 'backup',\n    // the roles that can backup the specific\n    database_backup_roles: ['readWrite', 'dbOwner'],\n    // the roles that can backup all the database\n    all_database_backup_roles: ['readWriteAnyDatabase']\n};\n\nmodule.exports = database;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/config/database.js","const server = {\n  port: 8082,\n  interval: 2000,\n  logLevel: 'info'\n};\n\nmodule.exports = server;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/config/server.js","const backup = {\n\n    status: {\n        'PENDING': 'PENDING',\n        'WAITING': 'WAITING',\n        'RUNNING': 'RUNNING',\n        'STOP': 'STOP'\n    },\n\n    result: {\n        'SUCCEED': 'SUCCEED',\n        'FAILED': 'FAILED'\n    }\n\n};\n\nmodule.exports = backup;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/constants/backup.js","const actions = {\n    DELETE_DB: 'DELETE_DB',\n    BACKUP: 'BACKUP'\n};\n\nmodule.exports = actions;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/constants/task.js","const userHelper = require('modules/helper/user');\nconst response = require('modules/helper/response');\nconst tokenManager = require('modules/auth/token');\nconst request = require('modules/helper/request');\nconst authError = require('modules/error/auth');\n\n\nconst userController = {\n\n    localDB: null,\n\n    validateUser: (user, req, res, next) => {\n        if(userHelper.isAdmin(user)) {\n            let t = tokenManager.newToken(req);\n\n            tokenManager.setTokenToDB(t)\n                .then(\n                    () => {\n                        // set cookie\n                        res.cookie('token', t.token);\n                        // TODO return the role of admin user\n                        next(response.success(t))\n                    },\n                    error => {\n                        next(response.error(error.message));\n                    }\n                )\n        }else {\n            next(response.error(authError.AUTH_ERROR, authError.CODE));\n        }\n    },\n\n    logoutUser: (token, req, res, next) => {\n        const ip = request.getIp(req);\n        const user_agent = request.getUserAgent(req);\n\n        tokenManager.getTokensFromDB({\n            token,\n            ip,\n            user_agent,\n            valid: true\n        })\n        .then(tokens => {\n            if(tokens.length === 0) {\n                next(response.error(authError.AUTH_ERROR, authError.code));\n                return;\n            }\n\n            return tokenManager\n                         .invalidateTokens({\n                             token,\n                             ip,\n                             user_agent,\n                             valid: true\n                         })\n                         .then(() => {\n                             res.cookie('token', null);\n                         })\n        })\n        .then(() => {\n            next(response.success());\n        })\n        .catch(err => {\n            next(response.error(authError.AUTH_ERROR, authError.CODE));\n        })\n    }\n}   \n\nmodule.exports = userController;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/controller/user.js","const config = require('modules/config');\n\nconst user = {\n    \n    isAdmin: (user) => {\n        // check if the user is admin\n        return user.username == config.auth.username &&\n               user.password == config.auth.password\n    }\n\n}\n\nmodule.exports = user;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/helper/user.js","const log = require('modules/utility/logger');\n\nconst logger = (req, resp, next) => {\n    log.debug(`Request from ${ req.originalUrl }`);\n    next();\n};\n\nmodule.exports = logger;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/middleware/logger.js","const response = require('modules/helper/response');\n\nconst responseHandler = (data, req, res, next) => {\n    //console.log(data);\n    response.send(res, data);\n};\n\nmodule.exports = responseHandler;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/middleware/response_handler.js","const response = require('modules/helper/response');\nconst request = require('modules/helper/request');\nconst tokenManager = require('modules/auth/token');\nconst authError = require('modules/error/auth');\nconst log = require('modules/utility/logger');\n\n\nconst tokenHandler = {\n    \n    validate: (req, res, next) => {\n        if(!tokenHandler.neededAuthenticated(req)) {\n            return next();\n        }\n\n        const token = req.cookies.token;\n\n        if(token == null) {\n            response.send(res, response.error(authError.AUTH_ERROR, authError.CODE));\n            return;\n        }\n\n        const ip = request.getIp(req);\n        const user_agent = request.getUserAgent(req);\n        const now = new Date().valueOf();\n        \n        tokenManager.getTokensFromDB(\n                        {\n                            token, \n                            ip, \n                            user_agent, \n                            valid: true,\n                            exp_time: {'$gt': now}\n                        }\n                    )\n                    .then(tokens => {\n                        if(tokens.length == 0) {\n                            \n                            throw undefined;\n                        }\n\n                        // token authenticated\n                        next();\n                    })\n                    .catch(error => {\n                        console.error(error);\n                        response.send(res, response.error(authError.AUTH_ERROR, authError.CODE));\n                    })\n    },\n\n    neededAuthenticated: req => {\n        const url = req.originalUrl;\n\n        if(url === '/' ||\n           url == '/user/auth/login' ||\n           url.indexOf('dist') >= 0) {\n           // don't need to authenticate the request for frontend and sign in\n           return false; \n        }\n        return true;\n    }\n}\n\nmodule.exports = tokenHandler;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/middleware/token_handler.js","const express = require('express');\n\nconst response = require('modules/helper/response');\nconst backupController = require('modules/controller/backup');\nconst backups = express.Router();\n\nbackups.post('/create', (req, res, next) => {\n    const backupConfig = req.body;\n    backupController.newBackup(backupConfig, next)\n});\n\nbackups.get('/status', (req, res, next) => {\n    const backupID = req.query.id;\n    backupController.getBackupStatus(backupID, next);\n});\n\nbackups.get('/configs', (req, res, next) => {\n    backupController.getAllBackupConfigs(next);\n});\n\nbackups.get('/config', (req, res, next) => {\n    const backupID = req.query.id;\n    backupController.getBackupConfig(backupID, next);\n});\n\nbackups.post('/run', (req, res, next) => {\n    const data = req.body;\n    backupController.runBackup(data.id, next);\n});\n\nbackups.patch('/update', (req, res, next) => {\n    const backupID = req.body.id;\n    const updates = req.body.updates;\n\n    backupController.updateBackupConfig(backupID, updates, next);\n});\n\nbackups.post('/stop', (req, res, next) => {\n    const backupID = req.body.id;\n    \n    backupController.stop(backupID, next)\n});\n\nbackups.post('/resume', (req, res, next) => {\n    const backupID = req.body.id;\n\n    backupController.resume(backupID, next);\n});\n\nbackups.post('/restore', (req, res, next) => {\n    const {id, db, collections} = req.body;\n    backupController.restore(id, db, collections, next);\n});\n\nbackups.delete('/delete', (req, res, next) => {\n    const { id } = req.query;\n\n    backupController.deleteBackup(id, next)\n});\n\nbackups.delete('/:backupID/databases/:dbName', (req, res, next) => {\n    const backupID = req.params.backupID;\n    const dbName = req.params.dbName;\n\n    backupController.deleteCopyDB(backupID, dbName, next)\n});\n\nmodule.exports = backups;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/api/backups.js","const express = require('express');\nconst response = require('modules/helper/response');\nconst backupController = require('modules/controller/backup');\nconst collections = express.Router();\n\ncollections.delete('/', (req, res, next) => {\n    const data = req.body;\n    const { id, db, collections } = data;\n\n    backupController.deleteCollections(id, db, collections, next);\n});\n\ncollections.get('/', (req, res, next) => {\n    const data = req.query;\n    const { id, db } = data;\n\n    backupController.getCollections(id, db, next)\n});\n\ncollections.get('/data', (req, res, next) => {\n    const data = req.query;\n    const { id, db, collection } = data;\n\n    backupController.getDataFromCollection(id, db, collection, next)\n});\n\nmodule.exports = collections;\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/api/collections.js","const express = require('express');\nconst response = require('modules/helper/response');\nconst backupController = require('modules/controller/backup');\nconst databases = express.Router();\n\n\ndatabases.get('/availableDBs', (req, res, next) => {\n    const mongoParams = req.query;\n    backupController.getAvailableDBsCollections(mongoParams, next)\n});\n\ndatabases.get('/copyDBs', (req, res, next) => {\n    const backupID = req.query.id;\n\n    backupController.getBackupCopyDBs(backupID, next);\n});\n\ndatabases.get('/originalDB', (req, res, next) => {\n    const backupID = req.query.id;\n\n    backupController.getOriginalDB(backupID, next);\n});\n\ndatabases.get('/allOriginalDBs', (req, res, next) => {\n    backupController.getAllOriginalDBs(next);\n});\n\ndatabases.get('/allCopyDBs', (req, res, next) => {\n    backupController.getAllBackupCopyDBs(next);\n});\n\ndatabases.delete('/', (req, res, next) => {\n    const { id, db } = req.query;\n\n    backupController.deleteDB(id, db, next)\n});\n\nmodule.exports = databases;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/api/databases.js","const express = require('express');\nconst backups = require('./backups');\nconst database = require('./databases');\nconst collections = require('./collections');\nconst logs = require('./logs');\n\nconst api = express.Router();\n\napi.use('/backups', backups);\napi.use('/databases', database);\napi.use('/collections', collections);\napi.use('/logs', logs);\n\nmodule.exports = api;\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/api/index.js","const express = require('express');\n\nconst backupController = require('modules/controller/backup');\n\nconst logs = express.Router();\n\nlogs.get('/', (req, res, next) => {\n    const backupID = req.query.id;\n\n    backupController.getAllBackupLogs(backupID, next);\n});\n\nmodule.exports = logs;\n\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/api/logs.js","const express = require('express');\nconst path = require('path');\n\nconst publicPath = express.static(path.join(__dirname, '../frontend/dist'));\nconst indexFile = path.join(__dirname, '../frontend/dist/index.html');\n\nmodule.exports = {\n    publicPath,\n    indexFile\n};\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/frontend.js","const express = require('express');\nconst auth = express.Router();\nconst userController = require('modules/controller/user');\n\n\nauth.post('/login', (req, res, next) => {\n    const user = req.body;\n    \n    userController.validateUser(user, req, res, next);\n})\n\nauth.post('/logout', (req, res, next) => {\n    const token = req.cookies.token;\n\n    userController.logoutUser(token, req, res, next);\n})\n\nmodule.exports = auth;\n\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/user/auth.js","const express = require('express');\nconst auth = require('./auth');\nconst operation = require('./operation');\n\nconst user = express.Router();\n\nuser.use('/auth', auth);\nuser.use('/operation', operation);\n\nmodule.exports = user;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/user/index.js","const express = require('express');\nconst operation = express.Router();\n\noperation.post('/create', (req, res, next) => {\n    \n})\n\noperation.delete('remove', (req, res, next) => {\n\n})\n\nmodule.exports = operation;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/router/user/operation.js","const database = {\n\n    getMongoUri: (username, password, server, port, authDB='admin') => {\n        return `mongodb://${ (username && password)? (username + ':' + password + '@')\n            : '' }${ server + ':' + port + '/' + authDB}`;\n    },\n\n};\n\nmodule.exports = database;\n\n\n// WEBPACK FOOTER //\n// ./server/modules/utility/database.js","module.exports = require(\"basic-logger\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"basic-logger\"\n// module id = 42\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 43\n// module chunks = 0","module.exports = require(\"cookie-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cookie-parser\"\n// module id = 44\n// module chunks = 0","module.exports = require(\"mongodb\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mongodb\"\n// module id = 45\n// module chunks = 0"],"sourceRoot":""}